// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3msg/producer/writer/consumer_service_go

package writer

import (
	"github.com/m3db/m3msg/producer"

	"github.com/golang/mock/gomock"
)

// Mock of consumerServiceWriter interface
type MockconsumerServiceWriter struct {
	ctrl     *gomock.Controller
	recorder *_MockconsumerServiceWriterRecorder
}

// Recorder for MockconsumerServiceWriter (not exported)
type _MockconsumerServiceWriterRecorder struct {
	mock *MockconsumerServiceWriter
}

func NewMockconsumerServiceWriter(ctrl *gomock.Controller) *MockconsumerServiceWriter {
	mock := &MockconsumerServiceWriter{ctrl: ctrl}
	mock.recorder = &_MockconsumerServiceWriterRecorder{mock}
	return mock
}

func (_m *MockconsumerServiceWriter) EXPECT() *_MockconsumerServiceWriterRecorder {
	return _m.recorder
}

func (_m *MockconsumerServiceWriter) Write(rm *producer.RefCountedMessage) {
	_m.ctrl.Call(_m, "Write", rm)
}

func (_mr *_MockconsumerServiceWriterRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0)
}

func (_m *MockconsumerServiceWriter) Init(_param0 initType) error {
	ret := _m.ctrl.Call(_m, "Init", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockconsumerServiceWriterRecorder) Init(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init", arg0)
}

func (_m *MockconsumerServiceWriter) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockconsumerServiceWriterRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockconsumerServiceWriter) SetMessageTTLNanos(value int64) {
	_m.ctrl.Call(_m, "SetMessageTTLNanos", value)
}

func (_mr *_MockconsumerServiceWriterRecorder) SetMessageTTLNanos(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMessageTTLNanos", arg0)
}

func (_m *MockconsumerServiceWriter) RegisterFilter(fn producer.FilterFunc) {
	_m.ctrl.Call(_m, "RegisterFilter", fn)
}

func (_mr *_MockconsumerServiceWriterRecorder) RegisterFilter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterFilter", arg0)
}

func (_m *MockconsumerServiceWriter) UnregisterFilter() {
	_m.ctrl.Call(_m, "UnregisterFilter")
}

func (_mr *_MockconsumerServiceWriterRecorder) UnregisterFilter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnregisterFilter")
}
