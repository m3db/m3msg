// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3msg/producer/writer/shard_go

package writer

import (
	"reflect"

	"github.com/m3db/m3cluster/placement"
	"github.com/m3db/m3msg/producer"

	"github.com/golang/mock/gomock"
)

// MockshardWriter is a mock of shardWriter interface
type MockshardWriter struct {
	ctrl     *gomock.Controller
	recorder *MockshardWriterMockRecorder
}

// MockshardWriterMockRecorder is the mock recorder for MockshardWriter
type MockshardWriterMockRecorder struct {
	mock *MockshardWriter
}

// NewMockshardWriter creates a new mock instance
func NewMockshardWriter(ctrl *gomock.Controller) *MockshardWriter {
	mock := &MockshardWriter{ctrl: ctrl}
	mock.recorder = &MockshardWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockshardWriter) EXPECT() *MockshardWriterMockRecorder {
	return _m.recorder
}

// Write mocks base method
func (_m *MockshardWriter) Write(d producer.RefCountedData) {
	_m.ctrl.Call(_m, "Write", d)
}

// Write indicates an expected call of Write
func (_mr *MockshardWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockshardWriter)(nil).Write), arg0)
}

// UpdateInstances mocks base method
func (_m *MockshardWriter) UpdateInstances(instances []placement.Instance, cws map[string]consumerWriter) {
	_m.ctrl.Call(_m, "UpdateInstances", instances, cws)
}

// UpdateInstances indicates an expected call of UpdateInstances
func (_mr *MockshardWriterMockRecorder) UpdateInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateInstances", reflect.TypeOf((*MockshardWriter)(nil).UpdateInstances), arg0, arg1)
}

// Close mocks base method
func (_m *MockshardWriter) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockshardWriterMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockshardWriter)(nil).Close))
}
