// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3msg/producer/writer/shard_go

package writer

import (
	"github.com/m3db/m3cluster/placement"
	"github.com/m3db/m3msg/producer"

	"github.com/golang/mock/gomock"
)

// Mock of shardWriter interface
type MockshardWriter struct {
	ctrl     *gomock.Controller
	recorder *_MockshardWriterRecorder
}

// Recorder for MockshardWriter (not exported)
type _MockshardWriterRecorder struct {
	mock *MockshardWriter
}

func NewMockshardWriter(ctrl *gomock.Controller) *MockshardWriter {
	mock := &MockshardWriter{ctrl: ctrl}
	mock.recorder = &_MockshardWriterRecorder{mock}
	return mock
}

func (_m *MockshardWriter) EXPECT() *_MockshardWriterRecorder {
	return _m.recorder
}

func (_m *MockshardWriter) Write(rm *producer.RefCountedMessage) {
	_m.ctrl.Call(_m, "Write", rm)
}

func (_mr *_MockshardWriterRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0)
}

func (_m *MockshardWriter) UpdateInstances(instances []placement.Instance, cws map[string]consumerWriter) {
	_m.ctrl.Call(_m, "UpdateInstances", instances, cws)
}

func (_mr *_MockshardWriterRecorder) UpdateInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateInstances", arg0, arg1)
}

func (_m *MockshardWriter) SetMessageTTLNanos(value int64) {
	_m.ctrl.Call(_m, "SetMessageTTLNanos", value)
}

func (_mr *_MockshardWriterRecorder) SetMessageTTLNanos(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMessageTTLNanos", arg0)
}

func (_m *MockshardWriter) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockshardWriterRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockshardWriter) QueueSize() int {
	ret := _m.ctrl.Call(_m, "QueueSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockshardWriterRecorder) QueueSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueSize")
}
